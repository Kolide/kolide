package sso

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestDecodeAuthSAMLResponse(t *testing.T) {
	encodedResp := []byte(`PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvdjEva29saWRlL3Nzby9jYWxsYmFjayIgSUQ9ImlkMjEzMzA4NTUxOTEwNDI0MjYxNjEyMzU1MjQiIEluUmVzcG9uc2VUbz0iOWEzM2Q3MjAtZjQ0YS00MDg4LTlhZDItNzFkNzRiYjc4MTZhIiBJc3N1ZUluc3RhbnQ9IjIwMTctMDQtMjBUMTU6MTk6MTUuOTQ4WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OmVudGl0eSI%2BaHR0cDovL3d3dy5va3RhLmNvbS9leGthNHprZjZkeG04cEYyMjBoNzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHM6UmVmZXJlbmNlIFVSST0iI2lkMjEzMzA4NTUxOTEwNDI0MjYxNjEyMzU1MjQiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkczpEaWdlc3RWYWx1ZT5uakUrSW80VmYrZUc1TC9qWkcybnFLNW1NRlF4ZEkwTHN0dFFMWFVMbkljPTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5RUTIxaXJlNkRmWVYrOERabllvSS95d1hKOTZsR0pQaXkxajVwbGNwMVZxcmQwam9VSGpaMjYrVllEZU45VGtSaFNxRy9xNTVHK2tHOStxZURycDZRazNUeTlmYXZTcWJid2FNelEwSkZzck1xd2xZc294K3JMcXlHcVNBeVhRL0RRemJIajBoNndGZGlwVGhIRlIwbVk4MnFiMHZ3SVdqeUozcWtkSHFSU051NVJ1ZDBUQy9TaDBvTkFSUjlrTnRYRWhjNHJnSjJ6REdWMzNzcXVmUFFNUlBBQVBVbnllUVRWTFNjMU93Q3pHQlFFNVNjQkx6dU90emt0ZDkzRWxKK2lBUkhzMWpCZmNwMW55UzNRMnBRREtRZmRUMkd5Qmkvd2t4UERBSFJScHZLMVlRaDdPZHZjcEZ2WVQ2YjNJOHZGOVZYMzZtamkxdDVaMm9BZy9xQ1E9PTwvZHM6U2lnbmF0dXJlVmFsdWU%2BPGRzOktleUluZm8%2BPGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU%2BTUlJRHBEQ0NBb3lnQXdJQkFnSUdBVnRZQjRjMU1BMEdDU3FHU0liM0RRRUJDd1VBTUlHU01Rc3dDUVlEVlFRR0V3SlZVekVUTUJFRwpBMVVFQ0F3S1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeVlXNWphWE5qYnpFTk1Bc0dBMVVFQ2d3RVQydDBZVEVVCk1CSUdBMVVFQ3d3TFUxTlBVSEp2ZG1sa1pYSXhFekFSQmdOVkJBTU1DbVJsZGkweE16SXdNemd4SERBYUJna3Foa2lHOXcwQkNRRVcKRFdsdVptOUFiMnQwWVM1amIyMHdIaGNOTVRjd05ERXdNVE15TVRJd1doY05NamN3TkRFd01UTXlNakl3V2pDQmtqRUxNQWtHQTFVRQpCaE1DVlZNeEV6QVJCZ05WQkFnTUNrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY01EVk5oYmlCR2NtRnVZMmx6WTI4eERUQUxCZ05WCkJBb01CRTlyZEdFeEZEQVNCZ05WQkFzTUMxTlRUMUJ5YjNacFpHVnlNUk13RVFZRFZRUUREQXBrWlhZdE1UTXlNRE00TVJ3d0dnWUoKS29aSWh2Y05BUWtCRmcxcGJtWnZRRzlyZEdFdVkyOXRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQQpwK0ZWUG04MEFLaDdIeVRyVkEwNU5Iejh0TUtJanR0MFRtYlJtanA2TW9sK2pHTFliNUlMelBLUUFtZGgvL2EwaEVYVFRzUE53NUgxCjM1Zmw1YXVYSTFuNmk4Wm5vR2M5L1ltN2dTV0t6OTNwbGJ1MWkzUWJ4aEdIWm1Ldk82NkJhN2FnNno2a282a2c5QThrMlVLNCs1TzQKVDB0b1JVWjU0WWtIL3VnRHRmaHNwamxGNU5qTndrdEw0RGovRU9lbDVBOUkxMVduSGIybDN0WVprbDAvdmlLU0JPSGZyYVBsYkZVUwphRzhrZHVRa1c3KzRiWTE4SlVxRGNOdFFFVnZsejB6bStnM1dzZk5NL0JoaTFieGtJMGFEQ3lacEJzWGVkYU12NEtiWnpPdWR4NkxTCmVwaXhjTEhXa3U1aWRCVlJYcVFUR0xRZE5XL1AxcUdRZ2RBZVRRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCdnBBcDgKRXhWOVdyL1EzeDdmdm1jTmo5cW5rT05qVEZzNWs0UWhoNU1zL2FkcTlrTTdJZ0VlWTdzNlprc0MxdjVudVFPQUZXT1dnelpTM2FYMwpUZ2wxZnZQYVpGbXErd2N5a1VQbmFCRmJZMmF3UnlPZUlnZE5iVWpncjZmdmkvRDh4dmd1bkZHNFRJR3FmUzMzTy8raDliWGFDTVFCCkV5SEpxNUYrdS9oL0w4ZjZDWWlFWTIxcXBsOWJqTDNnK2xpMXRRVFA3Rm54QVIvdWo1Y1VzQnAxWmRWVVN5RXZDV2cwaEp4Nk5RUUYKM2xMYmIxeDFYajFZK0dLRmpuTnVkeWFpNjYwa00wMnhJNEQ1a2dqejlZcDBjN1VRMFF1Zm5xOE96cGRJclZIc3c0Tkl6SnBMdE84RApySUNRRGNoUjYvY3hvUUNrb3lmKy9ZVHBZNDkyTWFmVjwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMnA6U3RhdHVzIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBJRD0iaWQyMTMzMDg1NTE5MTA4MjAzMzEyNzUyMjMzMTYiIElzc3VlSW5zdGFudD0iMjAxNy0wNC0yMFQxNToxOToxNS45NDhaIiBWZXJzaW9uPSIyLjAiPjxzYW1sMjpJc3N1ZXIgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDplbnRpdHkiIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vd3d3Lm9rdGEuY29tL2V4a2E0emtmNmR4bThwRjIyMGg3PC9zYW1sMjpJc3N1ZXI%2BPGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGRzOlNpZ25lZEluZm8%2BPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxkczpSZWZlcmVuY2UgVVJJPSIjaWQyMTMzMDg1NTE5MTA4MjAzMzEyNzUyMjMzMTYiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkczpEaWdlc3RWYWx1ZT55bDg4OFVGYy9aOFpMYWFvM0tDQTJjb1FrZGFyRjZ0S1ZBWkdoK1gyaHBvPTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5BQmM1bGFLUVMxdWFQVXlTaHFIc1VyWXl5NWtRZmtTYStOaDJzQjdVRHZZSGtkUi9VQVVYaE1KcW5XMU42R1pqb3Y2TW1NbjljZWczcHkzVzA3cHIrZW1vK2VvSWU1VjZDWjNKemsvRHFNQ2VxcXlkZ0RzWEl5bFlnVFNsT0JLbWx2WFZnZzFqWllQTUVXVFRxOEVlTU01YXFFMERZMjhma3luK1dZeVdqdFU2V0RIK1ZlVXMyZ2c3aVI1M0VrS1k1cDcyNzhuOUpsMTZRRUFQY2VFRFoyb1lmcllxZjFuV1JGaXJLUWJzdWp5K0RONXhOcnRLanQzVG1Xdmd1VVhuaFl1NWZyYWYzQTZMcGF6S0trQ0h3My95dW1MZEV5a05pNm9lM05GUXI3dkdEUW1hRVpkaUViQWpmSVpoM3F5NDFMdDd3eUZWemk3ajBabFpuTmE3WlE9PTwvZHM6U2lnbmF0dXJlVmFsdWU%2BPGRzOktleUluZm8%2BPGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU%2BTUlJRHBEQ0NBb3lnQXdJQkFnSUdBVnRZQjRjMU1BMEdDU3FHU0liM0RRRUJDd1VBTUlHU01Rc3dDUVlEVlFRR0V3SlZVekVUTUJFRwpBMVVFQ0F3S1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeVlXNWphWE5qYnpFTk1Bc0dBMVVFQ2d3RVQydDBZVEVVCk1CSUdBMVVFQ3d3TFUxTlBVSEp2ZG1sa1pYSXhFekFSQmdOVkJBTU1DbVJsZGkweE16SXdNemd4SERBYUJna3Foa2lHOXcwQkNRRVcKRFdsdVptOUFiMnQwWVM1amIyMHdIaGNOTVRjd05ERXdNVE15TVRJd1doY05NamN3TkRFd01UTXlNakl3V2pDQmtqRUxNQWtHQTFVRQpCaE1DVlZNeEV6QVJCZ05WQkFnTUNrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY01EVk5oYmlCR2NtRnVZMmx6WTI4eERUQUxCZ05WCkJBb01CRTlyZEdFeEZEQVNCZ05WQkFzTUMxTlRUMUJ5YjNacFpHVnlNUk13RVFZRFZRUUREQXBrWlhZdE1UTXlNRE00TVJ3d0dnWUoKS29aSWh2Y05BUWtCRmcxcGJtWnZRRzlyZEdFdVkyOXRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQQpwK0ZWUG04MEFLaDdIeVRyVkEwNU5Iejh0TUtJanR0MFRtYlJtanA2TW9sK2pHTFliNUlMelBLUUFtZGgvL2EwaEVYVFRzUE53NUgxCjM1Zmw1YXVYSTFuNmk4Wm5vR2M5L1ltN2dTV0t6OTNwbGJ1MWkzUWJ4aEdIWm1Ldk82NkJhN2FnNno2a282a2c5QThrMlVLNCs1TzQKVDB0b1JVWjU0WWtIL3VnRHRmaHNwamxGNU5qTndrdEw0RGovRU9lbDVBOUkxMVduSGIybDN0WVprbDAvdmlLU0JPSGZyYVBsYkZVUwphRzhrZHVRa1c3KzRiWTE4SlVxRGNOdFFFVnZsejB6bStnM1dzZk5NL0JoaTFieGtJMGFEQ3lacEJzWGVkYU12NEtiWnpPdWR4NkxTCmVwaXhjTEhXa3U1aWRCVlJYcVFUR0xRZE5XL1AxcUdRZ2RBZVRRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCdnBBcDgKRXhWOVdyL1EzeDdmdm1jTmo5cW5rT05qVEZzNWs0UWhoNU1zL2FkcTlrTTdJZ0VlWTdzNlprc0MxdjVudVFPQUZXT1dnelpTM2FYMwpUZ2wxZnZQYVpGbXErd2N5a1VQbmFCRmJZMmF3UnlPZUlnZE5iVWpncjZmdmkvRDh4dmd1bkZHNFRJR3FmUzMzTy8raDliWGFDTVFCCkV5SEpxNUYrdS9oL0w4ZjZDWWlFWTIxcXBsOWJqTDNnK2xpMXRRVFA3Rm54QVIvdWo1Y1VzQnAxWmRWVVN5RXZDV2cwaEp4Nk5RUUYKM2xMYmIxeDFYajFZK0dLRmpuTnVkeWFpNjYwa00wMnhJNEQ1a2dqejlZcDBjN1VRMFF1Zm5xOE96cGRJclZIc3c0Tkl6SnBMdE84RApySUNRRGNoUjYvY3hvUUNrb3lmKy9ZVHBZNDkyTWFmVjwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0IHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6ZW1haWxBZGRyZXNzIj5qb2huQGtvbGlkZS5jbzwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iOWEzM2Q3MjAtZjQ0YS00MDg4LTlhZDItNzFkNzRiYjc4MTZhIiBOb3RPbk9yQWZ0ZXI9IjIwMTctMDQtMjBUMTU6MjQ6MTUuOTQ5WiIgUmVjaXBpZW50PSJodHRwczovL2xvY2FsaG9zdDo4MDgwL2FwaS92MS9rb2xpZGUvc3NvL2NhbGxiYWNrIi8%2BPC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTctMDQtMjBUMTU6MTQ6MTUuOTQ5WiIgTm90T25PckFmdGVyPSIyMDE3LTA0LTIwVDE1OjI0OjE1Ljk0OVoiIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U%2Ba29saWRldGVzdDwvc2FtbDI6QXVkaWVuY2U%2BPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDE3LTA0LTIwVDE1OjE5OjE1LjQ2MVoiIFNlc3Npb25JbmRleD0iOWEzM2Q3MjAtZjQ0YS00MDg4LTlhZDItNzFkNzRiYjc4MTZhIiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BPHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ%2BPC9zYW1sMjpBc3NlcnRpb24%2BPC9zYW1sMnA6UmVzcG9uc2U%2B`)
	resp, err := decodeAuthSAMLResponse(encodedResp)
	require.Nil(t, err)
	require.NotNil(t, resp)
}

// func TestDecodeAuthResponse(t *testing.T) {
// 	formArgs := `SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvdjEva29saWRlL3Nzby9jYWxsYmFjayIgSUQ9ImlkMjEzMjc2NzkzMTg5Njg1OTAxMjI0NDU0MTU5IiBJblJlc3BvbnNlVG89IjYyY2E2OGNmLTRjZjktNDk5OS05YzMxLTRjODg2ODJkYmJiNiIgSXNzdWVJbnN0YW50PSIyMDE3LTA0LTIwVDE2OjA0OjA4LjY5NloiIFZlcnNpb249IjIuMCI%2BPHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDplbnRpdHkiPmh0dHA6Ly93d3cub2t0YS5jb20vZXhrYTR6a2Y2ZHhtOHBGMjIwaDc8L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8%2BPGRzOlJlZmVyZW5jZSBVUkk9IiNpZDIxMzI3Njc5MzE4OTY4NTkwMTIyNDQ1NDE1OSI%2BPGRzOlRyYW5zZm9ybXM%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8%2BPGRzOkRpZ2VzdFZhbHVlPkFWMVA2ZG1mUUlKVFZUUEVNeWhGdmFkUlpkbmlqdjAzbXhFOTE0ZmhFNUk9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8%2BPGRzOlNpZ25hdHVyZVZhbHVlPlNhUWU1aDM5Z1RtNDFmeUQ2S21wUUhBdjVmM1MxVytJZCt0UFZiNlNEcERZTUdWdVJ3eDFvY1NTNXdQQllSVENMS2NRZHJPS3U0eDFLM1hiRS8yNjNxcnhhQW9SdEpFOTloOWl1eTVZSldueS84NVNyN2F5QnpSUmNEZnR0WUR4UjBOdE02Nmx0TDA1ODlZaVRJZ2ZxdlBkbTgyMVZWbDJVM3JGUXF6N1gxajdjbW9BaDVWbENaR2xhZWNGZ1pFMDFhZXlvQUg5WjZ6RUFWLzhyZHJOeGNCM0RDRVZXMXpra2M0MzRyOFhMZEVUY0ZITkIyNXQvLzYrOW15SXl6Mm5uaWljNWRybndhUTJuQkRRUDBCYzc0dXlQTW5vNlZFQXp0QVF5SmkyQkIxSldTVTFHU3Zla3hwaFBkelV5bG00MW1WdjNTMG9WNDZEY0YyWWtlUGdTZz09PC9kczpTaWduYXR1cmVWYWx1ZT48ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEcERDQ0FveWdBd0lCQWdJR0FWdFlCNGMxTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdTTVFzd0NRWURWUVFHRXdKVlV6RVRNQkVHCkExVUVDQXdLUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnd3TlUyRnVJRVp5WVc1amFYTmpiekVOTUFzR0ExVUVDZ3dFVDJ0MFlURVUKTUJJR0ExVUVDd3dMVTFOUFVISnZkbWxrWlhJeEV6QVJCZ05WQkFNTUNtUmxkaTB4TXpJd016Z3hIREFhQmdrcWhraUc5dzBCQ1FFVwpEV2x1Wm05QWIydDBZUzVqYjIwd0hoY05NVGN3TkRFd01UTXlNVEl3V2hjTk1qY3dOREV3TVRNeU1qSXdXakNCa2pFTE1Ba0dBMVVFCkJoTUNWVk14RXpBUkJnTlZCQWdNQ2tOaGJHbG1iM0p1YVdFeEZqQVVCZ05WQkFjTURWTmhiaUJHY21GdVkybHpZMjh4RFRBTEJnTlYKQkFvTUJFOXJkR0V4RkRBU0JnTlZCQXNNQzFOVFQxQnliM1pwWkdWeU1STXdFUVlEVlFRRERBcGtaWFl0TVRNeU1ETTRNUnd3R2dZSgpLb1pJaHZjTkFRa0JGZzFwYm1adlFHOXJkR0V1WTI5dE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnArRlZQbTgwQUtoN0h5VHJWQTA1Tkh6OHRNS0lqdHQwVG1iUm1qcDZNb2wrakdMWWI1SUx6UEtRQW1kaC8vYTBoRVhUVHNQTnc1SDEKMzVmbDVhdVhJMW42aThabm9HYzkvWW03Z1NXS3o5M3BsYnUxaTNRYnhoR0habUt2TzY2QmE3YWc2ejZrbzZrZzlBOGsyVUs0KzVPNApUMHRvUlVaNTRZa0gvdWdEdGZoc3BqbEY1TmpOd2t0TDREai9FT2VsNUE5STExV25IYjJsM3RZWmtsMC92aUtTQk9IZnJhUGxiRlVTCmFHOGtkdVFrVzcrNGJZMThKVXFEY050UUVWdmx6MHptK2czV3NmTk0vQmhpMWJ4a0kwYURDeVpwQnNYZWRhTXY0S2Jaek91ZHg2TFMKZXBpeGNMSFdrdTVpZEJWUlhxUVRHTFFkTlcvUDFxR1FnZEFlVFFJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ2cEFwOApFeFY5V3IvUTN4N2Z2bWNOajlxbmtPTmpURnM1azRRaGg1TXMvYWRxOWtNN0lnRWVZN3M2WmtzQzF2NW51UU9BRldPV2d6WlMzYVgzClRnbDFmdlBhWkZtcSt3Y3lrVVBuYUJGYlkyYXdSeU9lSWdkTmJVamdyNmZ2aS9EOHh2Z3VuRkc0VElHcWZTMzNPLytoOWJYYUNNUUIKRXlISnE1Rit1L2gvTDhmNkNZaUVZMjFxcGw5YmpMM2crbGkxdFFUUDdGbnhBUi91ajVjVXNCcDFaZFZVU3lFdkNXZzBoSng2TlFRRgozbExiYjF4MVhqMVkrR0tGam5OdWR5YWk2NjBrTTAyeEk0RDVrZ2p6OVlwMGM3VVEwUXVmbnE4T3pwZElyVkhzdzROSXpKcEx0TzhECnJJQ1FEY2hSNi9jeG9RQ2tveWYrL1lUcFk0OTJNYWZWPC9kczpYNTA5Q2VydGlmaWNhdGU%2BPC9kczpYNTA5RGF0YT48L2RzOktleUluZm8%2BPC9kczpTaWduYXR1cmU%2BPHNhbWwycDpTdGF0dXMgeG1sbnM6c2FtbDJwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJpZDIxMzI3Njc5MzE4OTk2NTA2ODc0MTYwNDQwIiBJc3N1ZUluc3RhbnQ9IjIwMTctMDQtMjBUMTY6MDQ6MDguNjk2WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6ZW50aXR5IiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BaHR0cDovL3d3dy5va3RhLmNvbS9leGthNHprZjZkeG04cEYyMjBoNzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHM6UmVmZXJlbmNlIFVSST0iI2lkMjEzMjc2NzkzMTg5OTY1MDY4NzQxNjA0NDAiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkczpEaWdlc3RWYWx1ZT5WTjZXMjdWdzZlaWF2SEEvZTNTdFZXQnVFRUZsTmF3Y1lpVGJoOWF0aFhnPTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5wZUF1c3FSR1Z3NXZKT0xkR2E0NUs0RWZrdDRXWjlMYVF1VHhEV25uaVJzSzllTHYva1ZxQjM1ZjMrTHdldTdRSmQ3Ynl3eGM1SzNDeUFrOG1ybzR6c0xOemxWSm1YOHRDYnp4cnBFVGxPUnpNUEdrNUNTNEtUSlY2MDEzR2paZFFJSXFHbnFmelBKVk5SUWJkMnRHSHNzU2hibnE2REdrZGZJdVZnbXZyMklndUUzdWtrSjNHSnM5VWM1UXQxUGRMZVhTOFlWcTFmZ0JSTnk4Z2VYdHdxMXpZWWlLY2dkT3BxMDJQWnBzWVJrdEtYdGl5SjFSSC9jakZhS0xFUDJNUG94VnRiTEl2bmRIZ2NWdGlaTTBxeklHKzNJWDlsek12cHFyODBWMXNHZ05jV1BONDhyOVJwcFNmTUlObGp2WCtGRzZ1ZERJbzRnTGZ6bUxCb3VLc2c9PTwvZHM6U2lnbmF0dXJlVmFsdWU%2BPGRzOktleUluZm8%2BPGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU%2BTUlJRHBEQ0NBb3lnQXdJQkFnSUdBVnRZQjRjMU1BMEdDU3FHU0liM0RRRUJDd1VBTUlHU01Rc3dDUVlEVlFRR0V3SlZVekVUTUJFRwpBMVVFQ0F3S1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeVlXNWphWE5qYnpFTk1Bc0dBMVVFQ2d3RVQydDBZVEVVCk1CSUdBMVVFQ3d3TFUxTlBVSEp2ZG1sa1pYSXhFekFSQmdOVkJBTU1DbVJsZGkweE16SXdNemd4SERBYUJna3Foa2lHOXcwQkNRRVcKRFdsdVptOUFiMnQwWVM1amIyMHdIaGNOTVRjd05ERXdNVE15TVRJd1doY05NamN3TkRFd01UTXlNakl3V2pDQmtqRUxNQWtHQTFVRQpCaE1DVlZNeEV6QVJCZ05WQkFnTUNrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY01EVk5oYmlCR2NtRnVZMmx6WTI4eERUQUxCZ05WCkJBb01CRTlyZEdFeEZEQVNCZ05WQkFzTUMxTlRUMUJ5YjNacFpHVnlNUk13RVFZRFZRUUREQXBrWlhZdE1UTXlNRE00TVJ3d0dnWUoKS29aSWh2Y05BUWtCRmcxcGJtWnZRRzlyZEdFdVkyOXRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQQpwK0ZWUG04MEFLaDdIeVRyVkEwNU5Iejh0TUtJanR0MFRtYlJtanA2TW9sK2pHTFliNUlMelBLUUFtZGgvL2EwaEVYVFRzUE53NUgxCjM1Zmw1YXVYSTFuNmk4Wm5vR2M5L1ltN2dTV0t6OTNwbGJ1MWkzUWJ4aEdIWm1Ldk82NkJhN2FnNno2a282a2c5QThrMlVLNCs1TzQKVDB0b1JVWjU0WWtIL3VnRHRmaHNwamxGNU5qTndrdEw0RGovRU9lbDVBOUkxMVduSGIybDN0WVprbDAvdmlLU0JPSGZyYVBsYkZVUwphRzhrZHVRa1c3KzRiWTE4SlVxRGNOdFFFVnZsejB6bStnM1dzZk5NL0JoaTFieGtJMGFEQ3lacEJzWGVkYU12NEtiWnpPdWR4NkxTCmVwaXhjTEhXa3U1aWRCVlJYcVFUR0xRZE5XL1AxcUdRZ2RBZVRRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCdnBBcDgKRXhWOVdyL1EzeDdmdm1jTmo5cW5rT05qVEZzNWs0UWhoNU1zL2FkcTlrTTdJZ0VlWTdzNlprc0MxdjVudVFPQUZXT1dnelpTM2FYMwpUZ2wxZnZQYVpGbXErd2N5a1VQbmFCRmJZMmF3UnlPZUlnZE5iVWpncjZmdmkvRDh4dmd1bkZHNFRJR3FmUzMzTy8raDliWGFDTVFCCkV5SEpxNUYrdS9oL0w4ZjZDWWlFWTIxcXBsOWJqTDNnK2xpMXRRVFA3Rm54QVIvdWo1Y1VzQnAxWmRWVVN5RXZDV2cwaEp4Nk5RUUYKM2xMYmIxeDFYajFZK0dLRmpuTnVkeWFpNjYwa00wMnhJNEQ1a2dqejlZcDBjN1VRMFF1Zm5xOE96cGRJclZIc3c0Tkl6SnBMdE84RApySUNRRGNoUjYvY3hvUUNrb3lmKy9ZVHBZNDkyTWFmVjwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0IHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6ZW1haWxBZGRyZXNzIj5qb2huQGtvbGlkZS5jbzwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iNjJjYTY4Y2YtNGNmOS00OTk5LTljMzEtNGM4ODY4MmRiYmI2IiBOb3RPbk9yQWZ0ZXI9IjIwMTctMDQtMjBUMTY6MDk6MDguNjk2WiIgUmVjaXBpZW50PSJodHRwczovL2xvY2FsaG9zdDo4MDgwL2FwaS92MS9rb2xpZGUvc3NvL2NhbGxiYWNrIi8%2BPC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTctMDQtMjBUMTU6NTk6MDguNjk2WiIgTm90T25PckFmdGVyPSIyMDE3LTA0LTIwVDE2OjA5OjA4LjY5NloiIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U%2Ba29saWRldGVzdDwvc2FtbDI6QXVkaWVuY2U%2BPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDE3LTA0LTIwVDE1OjE5OjE1LjQ2MVoiIFNlc3Npb25JbmRleD0iNjJjYTY4Y2YtNGNmOS00OTk5LTljMzEtNGM4ODY4MmRiYmI2IiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BPHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ%2BPC9zYW1sMjpBc3NlcnRpb24%2BPC9zYW1sMnA6UmVzcG9uc2U%2B&RelayState=78f8f889a818aefc`
// 	reader := bytes.NewBufferString(formArgs)
// 	auth, err := DecodeAuthResponse(reader)
// 	require.Nil(t, err)
// 	require.NotNil(t, auth)
// 	assert.Equal(t, "john@kolide.co", auth.UserID())
// 	assert.Equal(t, "78f8f889a818aefc", auth.RelayState())
// 	status, ok := auth.Status()
// 	assert.Nil(t, ok)
// 	assert.Equal(t, Success, status)
// }

func TestDecodeSuccessfulSalesforceResponse(t *testing.T) {
	relayState := "CPG+Mxa4opLDKI8SOBzfoQ=="
	samlResponse := ``
	auth, err := DecodeAuthResponse(samlResponse, relayState)
	require.Nil(t, err)
	require.NotNil(t, auth)
	status, err := auth.Status()
	assert.Nil(t, err)
	assert.Equal(t, Success, status)
	assert.Equal(t, "john@kolide.co", auth.UserID())
	assert.Equal(t, relayState, auth.RelayState())
}
