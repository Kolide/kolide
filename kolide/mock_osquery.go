// Automatically generated by MockGen. DO NOT EDIT!
// Source: kolide/osquery.go

package kolide

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of OsqueryStore interface
type MockOsqueryStore struct {
	ctrl     *gomock.Controller
	recorder *_MockOsqueryStoreRecorder
}

// Recorder for MockOsqueryStore (not exported)
type _MockOsqueryStoreRecorder struct {
	mock *MockOsqueryStore
}

func NewMockOsqueryStore(ctrl *gomock.Controller) *MockOsqueryStore {
	mock := &MockOsqueryStore{ctrl: ctrl}
	mock.recorder = &_MockOsqueryStoreRecorder{mock}
	return mock
}

func (_m *MockOsqueryStore) EXPECT() *_MockOsqueryStoreRecorder {
	return _m.recorder
}

func (_m *MockOsqueryStore) EnrollHost(uuid string, hostname string, ip string, platform string, nodeKeySize int) (*Host, error) {
	ret := _m.ctrl.Call(_m, "EnrollHost", uuid, hostname, ip, platform, nodeKeySize)
	ret0, _ := ret[0].(*Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOsqueryStoreRecorder) EnrollHost(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnrollHost", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockOsqueryStore) AuthenticateHost(nodeKey string) (*Host, error) {
	ret := _m.ctrl.Call(_m, "AuthenticateHost", nodeKey)
	ret0, _ := ret[0].(*Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOsqueryStoreRecorder) AuthenticateHost(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthenticateHost", arg0)
}

func (_m *MockOsqueryStore) SaveHost(host *Host) error {
	ret := _m.ctrl.Call(_m, "SaveHost", host)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOsqueryStoreRecorder) SaveHost(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SaveHost", arg0)
}

func (_m *MockOsqueryStore) MarkHostSeen(host *Host, t time.Time) error {
	ret := _m.ctrl.Call(_m, "MarkHostSeen", host, t)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOsqueryStoreRecorder) MarkHostSeen(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkHostSeen", arg0, arg1)
}

func (_m *MockOsqueryStore) LabelQueriesForHost(host *Host, cutoff time.Time) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "LabelQueriesForHost", host, cutoff)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOsqueryStoreRecorder) LabelQueriesForHost(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LabelQueriesForHost", arg0, arg1)
}

func (_m *MockOsqueryStore) RecordLabelQueryExecutions(host *Host, results map[string]bool, t time.Time) error {
	ret := _m.ctrl.Call(_m, "RecordLabelQueryExecutions", host, results, t)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOsqueryStoreRecorder) RecordLabelQueryExecutions(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RecordLabelQueryExecutions", arg0, arg1, arg2)
}

func (_m *MockOsqueryStore) NewQuery(query *Query) error {
	ret := _m.ctrl.Call(_m, "NewQuery", query)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOsqueryStoreRecorder) NewQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewQuery", arg0)
}

func (_m *MockOsqueryStore) NewLabel(label *Label) error {
	ret := _m.ctrl.Call(_m, "NewLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOsqueryStoreRecorder) NewLabel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewLabel", arg0)
}
